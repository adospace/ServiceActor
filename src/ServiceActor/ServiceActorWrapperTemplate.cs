// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ServiceActor
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using ServiceActor;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ServiceActorWrapperTemplate : ServiceActorWrapperTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threadin" +
                    "g.Tasks;\r\nusing ServiceActor;\r\n\r\npublic class ");
            
            #line 14 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrapName));
            
            #line default
            #line hidden
            this.Write("AsyncActorWrapper : ");
            
            #line 14 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrapFullName));
            
            #line default
            #line hidden
            this.Write(", ServiceActor.IServiceActorWrapper\r\n{\r\n    private readonly ");
            
            #line 16 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrapFullName));
            
            #line default
            #line hidden
            this.Write(" _objectToWrap;\r\n    private readonly string _typeOfObjectToWrap;\r\n\r\n    public o" +
                    "bject WrappedObject { get => _objectToWrap; }\r\n    public ActionQueue ActionQueu" +
                    "e { get; }\r\n\r\n    public ");
            
            #line 22 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrapName));
            
            #line default
            #line hidden
            this.Write("AsyncActorWrapper(");
            
            #line 22 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrapFullName));
            
            #line default
            #line hidden
            this.Write(@" objectToWrap, string typeOfObjectToWrap, ServiceActor.ActionQueue actionQueue)
    {
        _objectToWrap = objectToWrap ?? throw new ArgumentNullException(nameof(objectToWrap));
        _typeOfObjectToWrap = typeOfObjectToWrap ?? throw new ArgumentNullException(nameof(typeOfObjectToWrap));
        ActionQueue = actionQueue ?? throw new ArgumentNullException(nameof(actionQueue));
    }

    ");
            
            #line 29 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 foreach (var property in GetProperties()) { 
            
            #line default
            #line hidden
            this.Write("    public ");
            
            #line 30 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyType.GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 30 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        ");
            
            #line 32 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (property.CanRead) { 
            
            #line default
            #line hidden
            this.Write("        get\r\n        {\r\n            ");
            
            #line 35 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(property.GetAccessor)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            return _objectToWrap.");
            
            #line 37 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            ");
            
            #line 39 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 41 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyType.GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(" res = default;\r\n            Exception exceptionThrown = null;\r\n            var c" +
                    "allContext = CallContext.GetOrCreateCurrent();\r\n            if (!callContext.Can" +
                    "Push(ActionQueue, ");
            
            #line 44 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AllowReentrantCalls(property.InterfaceType)));
            
            #line default
            #line hidden
            this.Write("))\r\n            {\r\n                return _objectToWrap.");
            
            #line 46 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(@";
            }
            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
            {
                try
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);
                    res = _objectToWrap.");
            
            #line 54 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n  " +
                    "                  exceptionThrown = ex;\r\n                }\r\n\r\n                ca" +
                    "llContext.Pop(ActionQueue);\r\n\r\n            }, \r\n            keepContextForAsyncC" +
                    "alls: ");
            
            #line 64 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(property.GetAccessor) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(@");

            invocationItem?.WaitExecuted();

            if (exceptionThrown != null)
                throw exceptionThrown;

            if (invocationItem != null && invocationItem.WaitForPendingOperationCompletion())
            {
                res = invocationItem.GetLastPendingOperationResult<");
            
            #line 73 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyType.GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(">();\r\n            }\r\n\r\n            return res;\r\n\r\n            ");
            
            #line 78 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        ");
            
            #line 80 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 81 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (property.CanWrite) { 
            
            #line default
            #line hidden
            this.Write("        set\r\n        {\r\n            ");
            
            #line 84 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(property.SetAccessor)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            _objectToWrap.");
            
            #line 86 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n\r\n            ");
            
            #line 88 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n                var callContext = CallContext.GetOrCreateCurrent();\r\n          " +
                    "      if (!callContext.CanPush(ActionQueue, ");
            
            #line 91 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AllowReentrantCalls(property.InterfaceType)));
            
            #line default
            #line hidden
            this.Write("))\r\n                {\r\n                    _objectToWrap.");
            
            #line 93 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(@" = value;
                    return;
                }

                Exception exceptionThrown = null;
                var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);
                    try
                    {
                        _objectToWrap.");
            
            #line 104 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(@" = value;
                    }
                    catch (Exception ex)
                    {
                        exceptionThrown = ex;
                    }

                    callContext.Pop(ActionQueue);
                }, 
                keepContextForAsyncCalls: ");
            
            #line 113 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(property.SetAccessor) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(",\r\n                blockingCaller: ");
            
            #line 114 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BlockCaller(property.SetAccessor) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n                ");
            
            #line 116 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (BlockCaller(property.SetAccessor)) { 
            
            #line default
            #line hidden
            this.Write("                invocationItem?.WaitExecuted();\r\n\r\n                if (exceptionT" +
                    "hrown != null)\r\n                    throw exceptionThrown;\r\n\r\n                in" +
                    "vocationItem?.WaitForPendingOperationCompletion();\r\n                ");
            
            #line 123 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n            ");
            
            #line 126 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        ");
            
            #line 128 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n\t");
            
            #line 130 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    ");
            
            #line 132 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 foreach (var method in GetMethods()) { 
            
            #line default
            #line hidden
            this.Write("    \r\n        ");
            
            #line 134 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (method.Info.ReturnType == typeof(void)) { 
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 135 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodDeclarationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 137 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(method)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            _objectToWrap.");
            
            #line 139 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            ");
            
            #line 141 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n                var callContext = CallContext.GetOrCreateCurrent();\r\n          " +
                    "      if (!callContext.CanPush(ActionQueue, ");
            
            #line 144 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AllowReentrantCalls(method.InterfaceType)));
            
            #line default
            #line hidden
            this.Write("))\r\n                {\r\n                    _objectToWrap.");
            
            #line 146 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(@";
                    return;
                }

                Exception exceptionThrown = null;

                var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);

                    try
                    {
                        _objectToWrap.");
            
            #line 159 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n                    }\r\n                    catch (Exception ex)\r\n             " +
                    "       {\r\n                        exceptionThrown = ex;\r\n                    }\r\n" +
                    "\r\n                }, \r\n                keepContextForAsyncCalls: ");
            
            #line 167 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(",\r\n                blockingCaller: ");
            
            #line 168 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BlockCaller(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(" );\r\n\r\n                ");
            
            #line 170 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (BlockCaller(method)) { 
            
            #line default
            #line hidden
            this.Write("                invocationItem?.WaitExecuted();\r\n\r\n                if (exceptionT" +
                    "hrown != null)\r\n                    throw exceptionThrown;\r\n\r\n                in" +
                    "vocationItem?.WaitForPendingOperationCompletion();\r\n                ");
            
            #line 177 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n            ");
            
            #line 180 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        ");
            
            #line 182 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else if (method.Info.ReturnType == typeof(Task)) { 
            
            #line default
            #line hidden
            this.Write("        public async ");
            
            #line 183 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodDeclarationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 185 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(method)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            await _objectToWrap.");
            
            #line 187 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            ");
            
            #line 189 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n            Exception exceptionThrown = null;\r\n            var callContext = Ca" +
                    "llContext.GetOrCreateCurrent();\r\n            if (!callContext.CanPush(ActionQueu" +
                    "e, ");
            
            #line 193 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AllowReentrantCalls(method.InterfaceType)));
            
            #line default
            #line hidden
            this.Write("))\r\n            {\r\n                await _objectToWrap.");
            
            #line 195 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(@";
                return;
            }

            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, async () =>
            {
                try
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);
                    await _objectToWrap.");
            
            #line 205 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n  " +
                    "                  exceptionThrown = ex;\r\n                }\r\n\r\n                ca" +
                    "llContext.Pop(ActionQueue);\r\n\r\n            }, \r\n            keepContextForAsyncC" +
                    "alls: ");
            
            #line 215 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(@", 
            asyncEvent: true);

            await invocationItem?.WaitExecutedAsync();

            if (exceptionThrown != null)
                throw exceptionThrown;

            invocationItem?.WaitForPendingOperationCompletion();

            ");
            
            #line 225 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        ");
            
            #line 228 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else if (method.Info.ReturnType.BaseType == typeof(Task)) { 
            
            #line default
            #line hidden
            this.Write("        public async ");
            
            #line 229 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodDeclarationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 231 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(method)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            return await _objectToWrap.");
            
            #line 233 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            ");
            
            #line 235 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 237 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.ReturnType.GetGenericArguments()[0].GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(" res = default;\r\n            \r\n            Exception exceptionThrown = null;\r\n   " +
                    "         var callContext = CallContext.GetOrCreateCurrent();\r\n\r\n            if (" +
                    "!callContext.CanPush(ActionQueue, ");
            
            #line 242 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AllowReentrantCalls(method.InterfaceType)));
            
            #line default
            #line hidden
            this.Write("))\r\n            {\r\n                return await _objectToWrap.");
            
            #line 244 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(@";
            }

            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, async () =>
            {
                try
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);
                    res = await _objectToWrap.");
            
            #line 253 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n  " +
                    "                  exceptionThrown = ex;\r\n                }\r\n\r\n                ca" +
                    "llContext.Pop(ActionQueue);\r\n\r\n            }, \r\n            keepContextForAsyncC" +
                    "alls: ");
            
            #line 263 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(@", 
            asyncEvent: true);

            await invocationItem?.WaitExecutedAsync();

            if (exceptionThrown != null)
                throw exceptionThrown;

            if (invocationItem != null && invocationItem.WaitForPendingOperationCompletion())
            {
                res = invocationItem.GetLastPendingOperationResult<");
            
            #line 273 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.ReturnType.GetGenericArguments()[0].GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(">();\r\n            }\r\n\r\n            return res;\r\n\r\n            ");
            
            #line 278 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        ");
            
            #line 280 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 281 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodDeclarationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 283 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(method)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            return _objectToWrap.");
            
            #line 285 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            ");
            
            #line 287 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 289 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.ReturnType.GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(" res = default;\r\n            Exception exceptionThrown = null;\r\n            var c" +
                    "allContext = CallContext.GetOrCreateCurrent();\r\n            if (!callContext.Can" +
                    "Push(ActionQueue, ");
            
            #line 292 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AllowReentrantCalls(method.InterfaceType)));
            
            #line default
            #line hidden
            this.Write("))\r\n            {\r\n                return _objectToWrap.");
            
            #line 294 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(@";
            }

            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
            {
                try
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);
                    res = _objectToWrap.");
            
            #line 303 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n  " +
                    "                  exceptionThrown = ex;\r\n                }\r\n\r\n                ca" +
                    "llContext.Pop(ActionQueue);\r\n\r\n            }, \r\n            keepContextForAsyncC" +
                    "alls: ");
            
            #line 313 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(@");

            invocationItem?.WaitExecuted();

            if (exceptionThrown != null)
                throw exceptionThrown;

            if (invocationItem != null && invocationItem.WaitForPendingOperationCompletion())
            {
                res = invocationItem.GetLastPendingOperationResult<");
            
            #line 322 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Info.ReturnType.GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(">();\r\n            }\r\n\r\n            return res;\r\n\r\n            ");
            
            #line 327 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        ");
            
            #line 330 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    ");
            
            #line 332 "C:\Users\adosp\Source\Repos\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    \r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ServiceActorWrapperTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
