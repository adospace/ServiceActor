// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ServiceActor
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using ServiceActor;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ServiceActorWrapperTemplate : ServiceActorWrapperTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threadin" +
                    "g.Tasks;\r\n\r\npublic class ");
            
            #line 13 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrap.Name));
            
            #line default
            #line hidden
            this.Write("AsyncActorWrapper : ");
            
            #line 13 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrapFullName));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    private readonly ");
            
            #line 15 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrapFullName));
            
            #line default
            #line hidden
            this.Write(" _objectToWrap;\r\n    private readonly ServiceActor.ActionQueue _actionQueue;\r\n\r\n " +
                    "   public ");
            
            #line 18 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrap.Name));
            
            #line default
            #line hidden
            this.Write("AsyncActorWrapper(");
            
            #line 18 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrapFullName));
            
            #line default
            #line hidden
            this.Write(@" objectToWrap, ServiceActor.ActionQueue actionQueue)
    {
        _objectToWrap = objectToWrap ?? throw new ArgumentNullException(nameof(objectToWrap));
        _actionQueue = actionQueue ?? throw new ArgumentNullException(nameof(actionQueue));
    }

    ");
            
            #line 24 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 foreach (var property in GetProperties()) { 
            
            #line default
            #line hidden
            this.Write("    public ");
            
            #line 25 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyType.GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 25 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        ");
            
            #line 27 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (property.CanRead) { 
            
            #line default
            #line hidden
            this.Write("        get\r\n        {\r\n            ");
            
            #line 30 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (PropertyGetAllowsConcurrentAccess(property)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            return _objectToWrap.");
            
            #line 32 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            ");
            
            #line 34 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 36 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyType.GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(@" res = default;
            var executedEvent = new AutoResetEvent(false);
            Exception exceptionThrown = null;
            _actionQueue.Enqueue(() =>
            {
                try
                {
                    res = _objectToWrap.");
            
            #line 43 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n  " +
                    "                  exceptionThrown = ex;\r\n                }\r\n\r\n                ex" +
                    "ecutedEvent.Set();\r\n            }, ");
            
            #line 51 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(property) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n            executedEvent.WaitOne();\r\n\r\n            if (exceptionThrown != " +
                    "null)\r\n                throw exceptionThrown;\r\n\r\n            return res;\r\n\r\n    " +
                    "        ");
            
            #line 60 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        ");
            
            #line 62 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 63 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (property.CanWrite) { 
            
            #line default
            #line hidden
            this.Write("        set\r\n        {\r\n            ");
            
            #line 66 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (PropertySetAllowsConcurrentAccess(property)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            _objectToWrap.");
            
            #line 68 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n\r\n            ");
            
            #line 70 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 72 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (BlockCaller(property)) { 
            
            #line default
            #line hidden
            this.Write(@"
                var executedEvent = new AutoResetEvent(false);
                Exception exceptionThrown = null;

                _actionQueue.Enqueue(() =>
                {
                    try
                    {
                        _objectToWrap.");
            
            #line 81 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n                    }\r\n                    catch (Exception ex)\r\n     " +
                    "               {\r\n                        exceptionThrown = ex;\r\n               " +
                    "     }\r\n\r\n                    executedEvent.Set();\r\n                }, ");
            
            #line 89 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(property) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n                executedEvent.WaitOne();\r\n\r\n                if (exceptionTh" +
                    "rown != null)\r\n                    throw exceptionThrown;\r\n\r\n                ");
            
            #line 96 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n                _actionQueue.Enqueue(() =>\r\n                {\r\n                " +
                    "    _objectToWrap.");
            
            #line 100 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n                }, ");
            
            #line 101 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(property) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n                ");
            
            #line 103 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 105 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        ");
            
            #line 107 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n\t");
            
            #line 109 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    ");
            
            #line 111 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 foreach (var method in GetMethods()) { 
            
            #line default
            #line hidden
            this.Write("    \r\n        ");
            
            #line 113 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (method.ReturnType == typeof(void)) { 
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 114 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodDeclarationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 116 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(method)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            _objectToWrap.");
            
            #line 118 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            ");
            
            #line 120 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 122 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (BlockCaller(method)) { 
            
            #line default
            #line hidden
            this.Write(@"
                var executedEvent = new AutoResetEvent(false);
                Exception exceptionThrown = null;
                _actionQueue.Enqueue(() =>
                {
                    try
                    {
                        _objectToWrap.");
            
            #line 130 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n                    }\r\n                    catch (Exception ex)\r\n             " +
                    "       {\r\n                        exceptionThrown = ex;\r\n                    }\r\n" +
                    "                    executedEvent.Set();\r\n                }, ");
            
            #line 137 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n                if (exceptionThrown != null)\r\n                    throw exc" +
                    "eptionThrown;\r\n\r\n                executedEvent.WaitOne();\r\n\r\n                ");
            
            #line 144 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n                _actionQueue.Enqueue(() =>\r\n                {\r\n                " +
                    "    _objectToWrap.");
            
            #line 148 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n                }, ");
            
            #line 149 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n                ");
            
            #line 151 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 153 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        ");
            
            #line 155 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else if (method.ReturnType == typeof(Task)) { 
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 156 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodDeclarationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 158 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(method)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            return _objectToWrap.");
            
            #line 160 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            ");
            
            #line 162 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(@"
            var executedEvent = new Nito.AsyncEx.AsyncAutoResetEvent(false);
            Exception exceptionThrown = null;
            _actionQueue.Enqueue(async () =>
            {
                try
                {
                    await _objectToWrap.");
            
            #line 170 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n  " +
                    "                  exceptionThrown = ex;\r\n                }\r\n                exec" +
                    "utedEvent.Set();\r\n            }, ");
            
            #line 177 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n            if (exceptionThrown != null)\r\n                throw exceptionTh" +
                    "rown;\r\n\r\n            return executedEvent.WaitAsync();\r\n\r\n            ");
            
            #line 184 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        ");
            
            #line 187 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else if (method.ReturnType.BaseType == typeof(Task)) { 
            
            #line default
            #line hidden
            this.Write("        public async ");
            
            #line 188 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodDeclarationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 190 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(method)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            return await _objectToWrap.");
            
            #line 192 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            ");
            
            #line 194 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 196 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.ReturnType.GetGenericArguments()[0].GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(@" res = default;
            var executedEvent = new Nito.AsyncEx.AsyncAutoResetEvent(false);
            Exception exceptionThrown = null;
            _actionQueue.Enqueue(async () =>
            {
                try
                {
                    res = await _objectToWrap.");
            
            #line 203 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n  " +
                    "                  exceptionThrown = ex;\r\n                }\r\n                exec" +
                    "utedEvent.Set();\r\n            }, ");
            
            #line 210 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n            await executedEvent.WaitAsync();\r\n\r\n            if (exceptionTh" +
                    "rown != null)\r\n                throw exceptionThrown;\r\n\r\n            return res;" +
                    "\r\n\r\n            ");
            
            #line 219 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n        ");
            
            #line 221 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 222 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodDeclarationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 224 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 if (MethodAllowsConcurrentAccess(method)) { 
            
            #line default
            #line hidden
            this.Write("\r\n            return _objectToWrap.");
            
            #line 226 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n            ");
            
            #line 228 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 230 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.ReturnType.GetTypeReferenceCode()));
            
            #line default
            #line hidden
            this.Write(@" res = default;
            var executedEvent = new AutoResetEvent(false);
            Exception exceptionThrown = null;
            _actionQueue.Enqueue(() =>
            {
                try
                {
                    res = _objectToWrap.");
            
            #line 237 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.GetMethodInvocationCode()));
            
            #line default
            #line hidden
            this.Write(";\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n  " +
                    "                  exceptionThrown = ex;\r\n                }\r\n                exec" +
                    "utedEvent.Set();\r\n            }, ");
            
            #line 244 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(KeepAsyncContext(method) ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n            executedEvent.WaitOne();\r\n            if (exceptionThrown != null" +
                    ")\r\n                throw exceptionThrown;\r\n            return res;\r\n\r\n          " +
                    "  ");
            
            #line 250 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        ");
            
            #line 253 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    ");
            
            #line 255 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    \r\n}\r\n\r\nreturn new ");
            
            #line 259 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrap.Name));
            
            #line default
            #line hidden
            this.Write("AsyncActorWrapper((");
            
            #line 259 "D:\Source\Projects\ServiceActor\src\ServiceActor\ServiceActorWrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeToWrapFullName));
            
            #line default
            #line hidden
            this.Write(")ObjectToWrap, ActionQueueToShare);");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ServiceActorWrapperTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
