<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="ServiceActor" #>
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

public class <#= TypeToWrap.Name #>AsyncActorWrapper : <#= TypeToWrapFullName #>
{
    private readonly <#= TypeToWrapFullName #> _objectToWrap;
    private readonly ServiceActor.ActionQueue _actionQueue;

    public <#= TypeToWrap.Name #>AsyncActorWrapper(<#= TypeToWrapFullName #> objectToWrap, ServiceActor.ActionQueue actionQueue)
    {
        _objectToWrap = objectToWrap ?? throw new ArgumentNullException(nameof(objectToWrap));
        _actionQueue = actionQueue ?? throw new ArgumentNullException(nameof(actionQueue));
    }

    <# foreach (var property in GetProperties()) { #>
    public <#= property.PropertyType.GetTypeReferenceCode() #> <#= property.Name #>
    {
        <# if (property.CanRead) { #>
        get
        {
            <# if (PropertyGetAllowsConcurrentAccess(property)) { #>

            return _objectToWrap.<#= property.Name #>;

            <# } else { #>

            <#= property.PropertyType.GetTypeReferenceCode() #> res = default;
            var executedEvent = new AutoResetEvent(false);
            _actionQueue.Enqueue(() =>
            {
                res = _objectToWrap.<#= property.Name #>;
                executedEvent.Set();
            }, <#= KeepAsyncContext(property) ? "true" : "false" #>);
            executedEvent.WaitOne();
            return res;

            <# } #>
        }
        <# } #>
        <# if (property.CanWrite) { #>
        set
        {
            <# if (PropertySetAllowsConcurrentAccess(property)) { #>

            _objectToWrap.<#= property.Name #> = value;

            <# } else { #>

                <# if (BlockCaller(property)) { #>

                var executedEvent = new AutoResetEvent(false);
                _actionQueue.Enqueue(() =>
                {
                    _objectToWrap.<#= property.Name #> = value;
                    executedEvent.Set();
                }, <#= KeepAsyncContext(property) ? "true" : "false" #>);
                executedEvent.WaitOne();

                <# } else { #>

                _actionQueue.Enqueue(() =>
                {
                    _objectToWrap.<#= property.Name #> = value;
                }, <#= KeepAsyncContext(property) ? "true" : "false" #>);

                <# } #>

            <# } #>
        }
        <# } #>
    }
	<# } #>

    <# foreach (var method in GetMethods()) { #>
    
        <# if (method.ReturnType == typeof(void)) { #>
        public <#= method.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            _objectToWrap.<#= method.GetMethodInvocationCode() #>;

            <# } else { #>

                <# if (BlockCaller(method)) { #>

                var executedEvent = new AutoResetEvent(false);
                _actionQueue.Enqueue(() =>
                {
                    _objectToWrap.<#= method.GetMethodInvocationCode() #>;
                    executedEvent.Set();
                }, <#= KeepAsyncContext(method) ? "true" : "false" #>);
                executedEvent.WaitOne();

                <# } else { #>

                _actionQueue.Enqueue(() =>
                {
                    _objectToWrap.<#= method.GetMethodInvocationCode() #>;
                }, <#= KeepAsyncContext(method) ? "true" : "false" #>);

                <# } #>

            <# } #>
        }
        <# } else if (method.ReturnType == typeof(Task)) { #>
        public <#= method.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            return _objectToWrap.<#= method.GetMethodInvocationCode() #>;

            <# } else { #>

            var executedEvent = new Nito.AsyncEx.AsyncAutoResetEvent(false);
            _actionQueue.Enqueue(async () =>
            {
                await _objectToWrap.<#= method.GetMethodInvocationCode() #>;
                executedEvent.Set();
            }, <#= KeepAsyncContext(method) ? "true" : "false" #>);

            return executedEvent.WaitAsync();

            <# } #>

        }
        <# } else if (method.ReturnType.BaseType == typeof(Task)) { #>
        public async <#= method.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            return await _objectToWrap.<#= method.GetMethodInvocationCode() #>;

            <# } else { #>

            <#= method.ReturnType.GetGenericArguments()[0].GetTypeReferenceCode() #> res = default;
            var executedEvent = new Nito.AsyncEx.AsyncAutoResetEvent(false);
            _actionQueue.Enqueue(async () =>
            {
                res = await _objectToWrap.<#= method.GetMethodInvocationCode() #>;
                executedEvent.Set();
            }, <#= KeepAsyncContext(method) ? "true" : "false" #>);

            await executedEvent.WaitAsync();
            return res;

            <# } #>

        }
        <# } else { #>
        public <#= method.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            return _objectToWrap.<#= method.GetMethodInvocationCode() #>

            <# } else { #>

            <#= method.ReturnType.GetTypeReferenceCode() #> res = default;
            var executedEvent = new AutoResetEvent(false);
            _actionQueue.Enqueue(() =>
            {
                res = _objectToWrap.<#= method.GetMethodInvocationCode() #>;
                executedEvent.Set();
            }, <#= KeepAsyncContext(method) ? "true" : "false" #>);
            executedEvent.WaitOne();
            return res;

            <# } #>

        }
        <# } #>

    <# } #>
    
}

return new <#= TypeToWrap.Name #>AsyncActorWrapper((<#= TypeToWrapFullName #>)ObjectToWrap, ActionQueueToShare);