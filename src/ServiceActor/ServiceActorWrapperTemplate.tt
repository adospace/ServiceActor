<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="ServiceActor" #>
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ServiceActor;

public class <#= TypeToWrapName #>AsyncActorWrapper : <#= TypeToWrapFullName #>, ServiceActor.IServiceActorWrapper
{
    private readonly <#= TypeToWrapFullName #> _objectToWrap;
    private readonly string _typeOfObjectToWrap;

    public object WrappedObject { get => _objectToWrap; }
    public ActionQueue ActionQueue { get; }

    public <#= TypeToWrapName #>AsyncActorWrapper(<#= TypeToWrapFullName #> objectToWrap, string typeOfObjectToWrap, ServiceActor.ActionQueue actionQueue)
    {
        _objectToWrap = objectToWrap ?? throw new ArgumentNullException(nameof(objectToWrap));
        _typeOfObjectToWrap = typeOfObjectToWrap ?? throw new ArgumentNullException(nameof(typeOfObjectToWrap));
        ActionQueue = actionQueue ?? throw new ArgumentNullException(nameof(actionQueue));
    }

    <# foreach (var property in GetProperties()) { #>
    public <#= property.PropertyType.GetTypeReferenceCode() #> <#= property.Name #>
    {
        <# if (property.CanRead) { #>
        get
        {
            <# if (MethodAllowsConcurrentAccess(property.GetAccessor)) { #>

            return _objectToWrap.<#= property.Name #>;

            <# } else { #>

            <#= property.PropertyType.GetTypeReferenceCode() #> res = default;
            Exception exceptionThrown = null;
            var callContext = CallContext.GetOrCreateCurrent();
            if (!callContext.CanPush(ActionQueue, <#= AllowReentrantCalls(property.InterfaceType) #>))
            {
                return _objectToWrap.<#= property.Name #>;
            }
            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
            {
                try
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);
                    res = _objectToWrap.<#= property.Name #>;
                }
                catch (Exception ex)
                {
                    exceptionThrown = ex;
                }

                callContext.Pop(ActionQueue);

            }, 
            keepContextForAsyncCalls: <#= KeepAsyncContext(property.GetAccessor) ? "true" : "false" #>);

            invocationItem?.WaitExecuted();

            if (exceptionThrown != null)
                throw exceptionThrown;

            if (invocationItem != null && invocationItem.WaitForPendingOperationCompletion())
            {
                res = invocationItem.GetLastPendingOperationResult<<#= property.PropertyType.GetTypeReferenceCode() #>>();
            }

			invocationItem?.Dispose();

            return res;

            <# } #>
        }
        <# } #>
        <# if (property.CanWrite) { #>
        set
        {
            <# if (MethodAllowsConcurrentAccess(property.SetAccessor)) { #>

            _objectToWrap.<#= property.Name #> = value;

            <# } else { #>

                var callContext = CallContext.GetOrCreateCurrent();
                if (!callContext.CanPush(ActionQueue, <#= AllowReentrantCalls(property.InterfaceType) #>))
                {
                    _objectToWrap.<#= property.Name #> = value;
                    return;
                }

                <# if (BlockCaller(property.SetAccessor)) { #>
                Exception exceptionThrown = null;
                <# } #>
                var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);
                    <# if (BlockCaller(property.SetAccessor)) { #>
                    try
                    {
                        _objectToWrap.<#= property.Name #> = value;
                    }
                    catch (Exception ex)
                    {
                        exceptionThrown = ex;
                    }

                    callContext.Pop(ActionQueue);
                    <# } else { #>
                    try
                    {
                        _objectToWrap.<#= property.Name #> = value;
                    }
                    finally
                    {
                        callContext.Pop(ActionQueue);
                    }
                    <# } #>
                }, 
                keepContextForAsyncCalls: <#= KeepAsyncContext(property.SetAccessor) ? "true" : "false" #>,
                blockingCaller: <#= BlockCaller(property.SetAccessor) ? "true" : "false" #>);

                <# if (BlockCaller(property.SetAccessor)) { #>
                invocationItem?.WaitExecuted();

                if (exceptionThrown != null)
                    throw exceptionThrown;

                invocationItem?.WaitForPendingOperationCompletion();
                <# } #>

				invocationItem?.Dispose();

            <# } #>
        }
        <# } #>
    }
	<# } #>

    <# foreach (var method in GetMethods()) { #>
    
        <# if (method.Info.ReturnType == typeof(void)) { #>
        public <#= method.Info.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;

            <# } else { #>

                var callContext = CallContext.GetOrCreateCurrent();
                if (!callContext.CanPush(ActionQueue, <#= AllowReentrantCalls(method.InterfaceType) #>))
                {
                    _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                    return;
                }

                <# if (BlockCaller(method)) { #>
                Exception exceptionThrown = null;
                <# } #>

                var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);
                    <# if (BlockCaller(method)) { #>
                    try
                    {
                        _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                    }
                    catch (Exception ex)
                    {
                        exceptionThrown = ex;
                    }
                    
                    callContext.Pop(ActionQueue);

                    <# } else { #>
                    try
                    {
                        _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                    }
                    finally
                    {
                        callContext.Pop(ActionQueue);
                    }
                    <# } #>
                }, 
                keepContextForAsyncCalls: <#= KeepAsyncContext(method) ? "true" : "false" #>,
                blockingCaller: <#= BlockCaller(method) ? "true" : "false" #> );

                <# if (BlockCaller(method)) { #>
                invocationItem?.WaitExecuted();

                if (exceptionThrown != null)
                    throw exceptionThrown;

                invocationItem?.WaitForPendingOperationCompletion();
                <# } #>

				invocationItem?.Dispose();

            <# } #>
        }
        <# } else if (method.Info.ReturnType == typeof(Task)) { #>
        public async <#= method.Info.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;

            <# } else { #>

            Exception exceptionThrown = null;
            var callContext = CallContext.GetOrCreateCurrent();
            if (!callContext.CanPush(ActionQueue, <#= AllowReentrantCalls(method.InterfaceType) #>))
            {
                await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                return;
            }

            var invocationItem = ActionQueue.EnqueueAsync(this, _typeOfObjectToWrap, async () =>
            {
                CallContext.SetCurrent(callContext);
                callContext.Push(ActionQueue);

                try
                {
                    await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                }
                catch (Exception ex)
                {
                    exceptionThrown = ex;
                }

                callContext.Pop(ActionQueue);
            }, 
            keepContextForAsyncCalls: <#= KeepAsyncContext(method) ? "true" : "false" #>);

            await invocationItem?.WaitExecutedAsync();

            if (exceptionThrown != null)
                throw exceptionThrown;

            invocationItem?.WaitForPendingOperationCompletion();

            <# } #>

			invocationItem?.Dispose();

        }
        <# } else if (method.Info.ReturnType.BaseType == typeof(Task)) { #>
        public async <#= method.Info.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            return await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;

            <# } else { #>

            <#= method.Info.ReturnType.GetGenericArguments()[0].GetTypeReferenceCode() #> res = default;
            
            Exception exceptionThrown = null;
            var callContext = CallContext.GetOrCreateCurrent();

            if (!callContext.CanPush(ActionQueue, <#= AllowReentrantCalls(method.InterfaceType) #>))
            {
                return await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
            }

            var invocationItem = ActionQueue.EnqueueAsync(this, _typeOfObjectToWrap, async () =>
            {
                CallContext.SetCurrent(callContext);
                callContext.Push(ActionQueue);

                try
                {
                    res = await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                }
                catch (Exception ex)
                {
                    exceptionThrown = ex;
                }

                callContext.Pop(ActionQueue);
            }, 
            keepContextForAsyncCalls: <#= KeepAsyncContext(method) ? "true" : "false" #>);

            await invocationItem?.WaitExecutedAsync();

            if (exceptionThrown != null)
                throw exceptionThrown;

            if (invocationItem != null && invocationItem.WaitForPendingOperationCompletion())
            {
                res = invocationItem.GetLastPendingOperationResult<<#= method.Info.ReturnType.GetGenericArguments()[0].GetTypeReferenceCode() #>>();
            }

			invocationItem?.Dispose();

            return res;

            <# } #>
        }
        <# } else { #>
        public <#= method.Info.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            return _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;

            <# } else { #>

            <#= method.Info.ReturnType.GetTypeReferenceCode() #> res = default;
            Exception exceptionThrown = null;
            var callContext = CallContext.GetOrCreateCurrent();
            if (!callContext.CanPush(ActionQueue, <#= AllowReentrantCalls(method.InterfaceType) #>))
            {
                return _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
            }

            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
            {
                try
                {
                    CallContext.SetCurrent(callContext);
                    callContext.Push(ActionQueue);
                    res = _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                }
                catch (Exception ex)
                {
                    exceptionThrown = ex;
                }

                callContext.Pop(ActionQueue);

            }, 
            keepContextForAsyncCalls: <#= KeepAsyncContext(method) ? "true" : "false" #>);

            invocationItem?.WaitExecuted();

            if (exceptionThrown != null)
                throw exceptionThrown;

            if (invocationItem != null && invocationItem.WaitForPendingOperationCompletion())
            {
                res = invocationItem.GetLastPendingOperationResult<<#= method.Info.ReturnType.GetTypeReferenceCode() #>>();
            }

			invocationItem?.Dispose();

            return res;

            <# } #>

        }
        <# } #>

    <# } #>
    
}
