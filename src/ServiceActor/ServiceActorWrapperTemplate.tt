<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="ServiceActor" #>
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ServiceActor;

public class <#= TypeToWrapName #>AsyncActorWrapper : <#= TypeToWrapFullName #>, ServiceActor.IServiceActorWrapper
{
    private readonly <#= TypeToWrapFullName #> _objectToWrap;
    private readonly string _typeOfObjectToWrap;

    public object WrappedObject { get => _objectToWrap; }
    public ActionQueue ActionQueue { get; }

    public <#= TypeToWrapName #>AsyncActorWrapper(<#= TypeToWrapFullName #> objectToWrap, string typeOfObjectToWrap, ServiceActor.ActionQueue actionQueue)
    {
        _objectToWrap = objectToWrap ?? throw new ArgumentNullException(nameof(objectToWrap));
        _typeOfObjectToWrap = typeOfObjectToWrap ?? throw new ArgumentNullException(nameof(typeOfObjectToWrap));
        ActionQueue = actionQueue ?? throw new ArgumentNullException(nameof(actionQueue));
    }

    <# foreach (var property in GetProperties()) { #>
    public <#= property.PropertyType.GetTypeReferenceCode() #> <#= property.Name #>
    {
        <# if (property.CanRead) { #>
        get
        {
            <# if (PropertyGetAllowsConcurrentAccess(property)) { #>

            return _objectToWrap.<#= property.Name #>;

            <# } else { #>

            <#= property.PropertyType.GetTypeReferenceCode() #> res = default;
            Exception exceptionThrown = null;
            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
            {
                try
                {
                    res = _objectToWrap.<#= property.Name #>;
                }
                catch (Exception ex)
                {
                    exceptionThrown = ex;
                }

            }, <#= KeepAsyncContext(property) ? "true" : "false" #>);

            invocationItem?.WaitExecuted();

            if (exceptionThrown != null)
                throw exceptionThrown;

            if (invocationItem != null && invocationItem.WaitForPendingOperationCompletion())
            {
                res = invocationItem.GetLastPendingOperationResult<<#= property.PropertyType.GetTypeReferenceCode() #>>();
            }

            return res;

            <# } #>
        }
        <# } #>
        <# if (property.CanWrite) { #>
        set
        {
            <# if (PropertySetAllowsConcurrentAccess(property)) { #>

            _objectToWrap.<#= property.Name #> = value;

            <# } else { #>

                <# if (BlockCaller(property)) { #>

                Exception exceptionThrown = null;

                var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
                {
                    try
                    {
                        _objectToWrap.<#= property.Name #> = value;
                    }
                    catch (Exception ex)
                    {
                        exceptionThrown = ex;
                    }

                }, <#= KeepAsyncContext(property) ? "true" : "false" #>);

                invocationItem?.WaitExecuted();

                if (exceptionThrown != null)
                    throw exceptionThrown;

                invocationItem?.WaitForPendingOperationCompletion();

                <# } else { #>

                ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
                {
                    _objectToWrap.<#= property.Name #> = value;
                }, <#= KeepAsyncContext(property) ? "true" : "false" #>);

                <# } #>

            <# } #>
        }
        <# } #>
    }
	<# } #>

    <# foreach (var method in GetMethods()) { #>
    
        <# if (method.Info.ReturnType == typeof(void)) { #>
        public <#= method.Info.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;

            <# } else { #>

                <# if (BlockCaller(method)) { #>

                Exception exceptionThrown = null;
                var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
                {
                    try
                    {
                        _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                    }
                    catch (Exception ex)
                    {
                        exceptionThrown = ex;
                    }

                }, <#= KeepAsyncContext(method) ? "true" : "false" #>);

                invocationItem?.WaitExecuted();

                if (exceptionThrown != null)
                    throw exceptionThrown;

                invocationItem?.WaitForPendingOperationCompletion();

                <# } else { #>

                ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
                {
                    _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                }, <#= KeepAsyncContext(method) ? "true" : "false" #>);

                <# } #>

            <# } #>
        }
        <# } else if (method.Info.ReturnType == typeof(Task)) { #>
        public async <#= method.Info.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;

            <# } else { #>

            Exception exceptionThrown = null;
            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, async () =>
            {
                try
                {
                    await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                }
                catch (Exception ex)
                {
                    exceptionThrown = ex;
                }
            }, <#= KeepAsyncContext(method) ? "true" : "false" #>, true);

            await invocationItem?.WaitExecutedAsync();

            if (exceptionThrown != null)
                throw exceptionThrown;

            invocationItem?.WaitForPendingOperationCompletion();

            <# } #>

        }
        <# } else if (method.Info.ReturnType.BaseType == typeof(Task)) { #>
        public async <#= method.Info.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            var res = await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;

            return res;

            <# } else { #>

            <#= method.Info.ReturnType.GetGenericArguments()[0].GetTypeReferenceCode() #> res = default;
            
            Exception exceptionThrown = null;
            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, async () =>
            {
                try
                {
                    res = await _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                }
                catch (Exception ex)
                {
                    exceptionThrown = ex;
                }
            }, <#= KeepAsyncContext(method) ? "true" : "false" #>, true);

            await invocationItem?.WaitExecutedAsync();

            if (exceptionThrown != null)
                throw exceptionThrown;

            if (invocationItem != null && invocationItem.WaitForPendingOperationCompletion())
            {
                res = invocationItem.GetLastPendingOperationResult<<#= method.Info.ReturnType.GetGenericArguments()[0].GetTypeReferenceCode() #>>();
            }

            return res;

            <# } #>
        }
        <# } else { #>
        public <#= method.Info.GetMethodDeclarationCode() #>
        {
            <# if (MethodAllowsConcurrentAccess(method)) { #>

            var res = _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>

            return res;
            <# } else { #>

            <#= method.Info.ReturnType.GetTypeReferenceCode() #> res = default;
            Exception exceptionThrown = null;
            var invocationItem = ActionQueue.Enqueue(this, _typeOfObjectToWrap, () =>
            {
                try
                {
                    res = _objectToWrap.<#= method.Info.GetMethodInvocationCode() #>;
                }
                catch (Exception ex)
                {
                    exceptionThrown = ex;
                }
            }, <#= KeepAsyncContext(method) ? "true" : "false" #>);

            invocationItem?.WaitExecuted();

            if (exceptionThrown != null)
                throw exceptionThrown;

            if (invocationItem != null && invocationItem.WaitForPendingOperationCompletion())
            {
                res = invocationItem.GetLastPendingOperationResult<<#= method.Info.ReturnType.GetTypeReferenceCode() #>>();
            }

            return res;

            <# } #>

        }
        <# } #>

    <# } #>
    
}
